まずETHローカルテストネットの扱いを練習

【gethのセットアップ】
CentOS系ではパッケージなし。githubからもってくる

sudo yum install -y golang gmp-devel git
git clone https://github.com/ethereum/go-ethereum
cd go-ethereum
make geth
sudo cp build/bin/geth /usr/local/bin

ビルドは３分ほどで終わる。大したことなし。GOだからな。
2/27にやったところgethのバージョンは1.8.2-unstable。不安なら安定板をgit checkout refs/tag/vX.X.X で。

【gethの初回起動】
geth version  バージョン確認
cd bentenlocal 適当なETHディレクトリ
genesis.jsonを作る

{
  "config": {
    "chainId": 33,
    "homesteadBlock": 0,
    "eip155Block": 0,
    "eip158Block": 0
  },
  "nonce": "0x0000000000000033",
  "timestamp": "0x0",
  "parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
  "gasLimit": "0x8000000",
  "difficulty": "0x100",
  "mixhash": "0x0000000000000000000000000000000000000000000000000000000000000000",
  "coinbase": "0x3333333333333333333333333333333333333333",
  "alloc": {}
}

本に載っているのとちょっと違う。設定項目の意味はよく見ておきたい

初期化
geth --datadir . init genesis.json
起動
geth --networkid 34 --nodiscover --maxpeers 0 --datadir . console

--nodiscover --maxpeers 0  この２つの設定でスタンドアローンということになる

【以下gethコンソールでの操作】
personal.newAccount("p0")
アカウント作成。p0はパスフレーズ。アドレスが表示される。
　0x2cae36071180d609cc10b300d3d6363bc279ee44
同様にp1も
　0xdb80222dc833a70a354049dab0409ad1e99a3afe

→アカウントの秘密鍵はノードに存在するということか。
→同一パスフレーズで異なるアカウントも許される

eth.accountsで全アカウント表示
etherbase(coinbaseも同義?)とは、マイニング報酬を受け取るアカウント。eth.accounts[0]が初期値だが後から変更可能

personal.unlockAccount(account, "pass", アンロック時間) 送金を可能にする
eth.getBalance(account) 残高取得
eth.blockNumber  現在のブロック数
eth.hashrate　ハッシュ計算力
eth.mining  現在マイニング中か
eth.getTransaction(transaction-id) Tx詳細

miner.start(1) スレッド数を指定してマイニング開始。初回のみDAG作成で時間がかかる。ASIC耐性が目的というがよくわからん　　~/.ethash以下に作成される


送金
eth.sendTransaction({from:<from>, to:<to>, value:<value>)

換算
web3.toWei(value, "ether")


--
実行したところ
　miner.startでnullが返るのがあやしい。本だとtrueが返ることになっている。
　mining=trueだが、hashrateは０のまま。しかし暫く放置してたら新しいブロックができた。


--
２台のP2Pをやってみよう
調べるとbootnodeコマンドが必要な感じだが全く見つからん

別法として、datadir/geth/static-nodes.jsonファイルに
[
  "enode://pubkey@ip:port"
]
と書くかJSコンソールからadmin.addPeerとすることもできるようだ

geth --identity "poderosa" --rpc --nodiscover --datadir . --port "30303" --networkid 34 --nat "any" console
sudo iptables -A INPUT -p tcp --dport 30303 -j ACCEPT
sudo iptables -A INPUT -p udp --dport 30303 -j ACCEPT

admin.nodeInfoでenodeがわかる
"enode://e110585f69875b29ac7cfb729c6be8aa1328e55cf9ac73f00ea192109bfb37ffff556a5894eabe6c912ff05d27d09bc038eddce39bcf5a50d88445157546d3f3@[54.249.216.127]:30303",

admin.addPeer("enode://e110585f69875b29ac7cfb729c6be8aa1328e55cf9ac73f00ea192109bfb37ffff556a5894eabe6c912ff05d27d09bc038eddce39bcf5a50d88445157546d3f3@[54.249.216.127]:30303")

↓らしい。publicにやるとき注意
Ethereum clients use a listener (TCP) port and a discovery (UDP) port, both on 30303 by default.

net.listening
net.peerCount
このあたりで確認

Windowsでもセットアップして確認したがつながらん　ElasticLoadBalancerはUDPがないしな -> EC2セキュリティグループだった、これでdebug logにがんがん来るようになった
Genesis block mismatchというエラーになっている -> windows側でも同一genesisでgeth initしてから接続したらいけた

eth.getBalance("0x2cae36071180d609cc10b300d3d6363bc279ee44")

---
次はコントラクトのビルドとデプロイ

コンパイラあるかな？　eth.getCompilers() -> ない
Windows, CentOSともsolcはないようだ

browser-solidityで適当なのをコンパイルし、結果を得る

トランザクションプッシュ：
fullhash=0x175fa42b5e97fac52f7c68f03344ed7a544a7be088307614f6ec9daa7748025f contract=0x96b3E2ED0647Ff04ded5D89342E24236Cf9Dd75C
マイニング開始少しして：
Contract mined! address: 0x96b3e2ed0647ff04ded5d89342e24236cf9dd75c transactionHash: 0x175fa42b5e97fac52f7c68f03344ed7a544a7be088307614f6ec9daa7748025f

だが残高は変わってない。マイニング報酬と一緒だからか？
アドレスはデプロイ前からわかってるんだな

greeter.address アドレス確認
JSメソッドでconst系は呼べる

greeter.setGreeter("sana4", {from:eth.accounts[0], gasLimit:10000});

これで状態変化するやつも呼べた
stringの連結すらできないとはね
ABIとはコンパイルして得られるjson array。web3.eth.contract(ABI) でコントラクトオブジェクト  at(address) で既存コントラクトを。
アドレスからabi, もあるよね


var g = "ritachi" ;
var greeterContract = web3.eth.contract([{"constant":false,"inputs":[{"name":"g","type":"string"}],"name":"setGreeter","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"greet3","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"greet","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"g","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"","type":"string"},{"indexed":false,"name":"","type":"int32"}],"name":"greeterUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"","type":"string"}],"name":"greeter3Called","type":"event"}]);
var greeter = greeterContract.new(
   "ritachi",
   {
     from: web3.eth.accounts[0], 
     data: '0x6060604052341561000f57600080fd5b60405161060138038061060183398101604052808051820191905050806001908051906020019061004192919061006c565b5060008060006101000a81548163ffffffff021916908360030b63ffffffff16021790555050610111565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100ad57805160ff19168380011785556100db565b828001600101855582156100db579182015b828111156100da5782518255916020019190600101906100bf565b5b5090506100e891906100ec565b5090565b61010e91905b8082111561010a5760008160009055506001016100f2565b5090565b90565b6104e1806101206000396000f300606060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063190663e41461005c57806355fef4fd146100b9578063cfae3217146100e2575b600080fd5b341561006757600080fd5b6100b7600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610170565b005b34156100c457600080fd5b6100cc61027c565b6040518082815260200191505060405180910390f35b34156100ed57600080fd5b6100f5610354565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561013557808201518184015260208101905061011a565b50505050905090810190601f1680156101625780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b80600190805190602001906101869291906103fc565b5060008081819054906101000a900460030b8092919060010191906101000a81548163ffffffff021916908360030b63ffffffff160217905550507f83f494054c46e3e4ab998edf1a49ccad230b657b68be51001b36c9eddc78c4e5816000809054906101000a900460030b60405180806020018360030b60030b8152602001828103825284818151815260200191508051906020019080838360005b8381101561023e578082015181840152602081019050610223565b50505050905090810190601f16801561026b5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a150565b60007fc9c5e90a0edadd962f6368dbda3023dbaa544b5f7f1aa4cfb6b5703f3ce4fd756001604051808060200182810382528381815460018160011615610100020316600290048152602001915080546001816001161561010002031660029004801561032a5780601f106102ff5761010080835404028352916020019161032a565b820191906000526020600020905b81548152906001019060200180831161030d57829003601f168201915b50509250505060405180910390a16001805460018160011615610100020316600290049050905090565b61035c61047c565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103f25780601f106103c7576101008083540402835291602001916103f2565b820191906000526020600020905b8154815290600101906020018083116103d557829003601f168201915b5050505050905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061043d57805160ff191683800117855561046b565b8280016001018555821561046b579182015b8281111561046a57825182559160200191906001019061044f565b5b5090506104789190610490565b5090565b602060405190810160405280600081525090565b6104b291905b808211156104ae576000816000905550600101610496565b5090565b905600a165627a7a7230582020eb4728cca9fecc30308fccf2c38d7052b6b64041d9f57da0e0909b2463e8cf0029', 
     gas: '4700000'
   }, function (e, contract){
    console.log(e, contract);
    if (typeof contract.address !== 'undefined') {
         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
    }
 });

var g2 = greeterContract.at("0xcb9360da944a13ab66ab603390479dc1b765ae31");

greeter.greeterUpdated({ valueA:null, valueB:null }).watch( function(e, val) { console.log("GR2!! " + JSON.stringify(val)); });
greeter.allEvents().watch( function(e, val, ) { console.log("ALL 2!! " + JSON.stringify(val)); });
greeter.setGreeter("sana7", {from:eth.accounts[0], gasLimit:10000});

var greeter = greeterContract.at("0xcb9360da944a13ab66ab603390479dc1b765ae31");

greeter.setGreeter("RITACHI");

これも便利ですねえ
var batch = web3.createBatch();
batch.add(web3.eth.getBalance.request('0x0000000000000000000000000000000000000000', 'latest', callback));
batch.add(web3.eth.Contract(abi).at(address).balance.request(address, callback2));
batch.execute()

--
結果の表現

「賭けのdescription」と「結果の表現」は別。
成否の判定までは他に依存せずできるが、払い戻し額は事前にわかるもの（宝くじ）、締め切り時にわかるもの（競馬）、購入時点のオッズで各ユーザごとに変動するもの（スポーツ系）、とがある。
コントラクトレベルではbyte[]か適当なstructで持っておき、エンコード・デコードの仕様を公開かつlibraryに抜き出す。Web経由とかではbyte[]へのエンコードは各言語でやることになる
結果の表現の中では単純な多数決になる。

どうにもstructのarrayの周辺で使いづらい。array[]で取った結果はストレージにならないような印象。完全に裏は取れてないが。
