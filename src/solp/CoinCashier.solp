pragma solidity ^0.4.0;
import "./BettingTarget_V8.sol";
import "./BettingTarget_V4.sol";
import "./CashierBase.sol";
import "./MajorityVote_R4.sol";
import "./IGame.sol";
import "./ERC223_Interface.sol";

/*
  Warning: This .solp file is converted solidity source code by the benten preprocessor
  You should 'npm run preprocess' to get solidity file
*/
contract CoinCashier is CashierBase , ERC223 {
    string private OutputFile = #FILE;

    string internal _symbol;

    //conversion rate
    uint internal _ETHToCoinRatePermil;
    uint internal _CoinToETHRatePermil;


    constructor(string name, string symbol, uint eth_to_coin, uint coin_to_eth, uint initialIssue, bool allowAdditionalIssue) public {
        _version = "CoinCashier.0";
        _name = name;
        _symbol = symbol;
        _issuedVolume = initialIssue;
        _poolVolume = initialIssue;
        _allowAdditionalIssue = allowAdditionalIssue;
        _open = true;
        _ETHToCoinRatePermil = eth_to_coin;
        _CoinToETHRatePermil = coin_to_eth;
    }

    function rateOfCoin(uint wei_) public view returns(uint) {
        return wei_ * _ETHToCoinRatePermil / 1000;
    }
    function rateOfWei(uint coin) public view returns(uint) {
        return coin * _CoinToETHRatePermil / 1000;
    }

    //single transfer
    function transferCoin(address to, uint coin) public {
        if(coin==0)
            return;
        transferCoin(msg.sender, to, coin);
    }
    
    //bulk transfer
    function multiTransferCoin(address[] to, uint[] coin) public {
        checkMultiTransferCoin(to, coin);
        if(hasError()) return; // if checkMultiTransferCoin() claims error, we just return

        for(uint i = 0; i < coin.length; i++)
            transferCoin(msg.sender, to[i], coin[i]);

    }

    //ETH refunding to owner
    function refundToOwner(uint value) public onlyOwner {
        uint debit_eth = rateOfWei(_issuedVolume - _poolVolume);
        uint balance = address(this).balance;
        if(balance < value) revert(); // avoid underflow of [balance - value]
        if(balance - value < debit_eth) revert(); // excess debt not allowed

        if(!_owner.call.value(value)()) revert(); //refund to cashier owner
    }
    function refundToOwnerLimit() public view returns(uint, uint, uint) {
        uint debit_eth = rateOfWei(_issuedVolume - _poolVolume);
        uint balance = address(this).balance;
        return (_issuedVolume - _poolVolume, debit_eth, balance - debit_eth);
    }

    //Betting or Voting Root Function

    //  only coin owner can call BettingTarget through this CoinCashier
    function bet8(address target, bytes8 content, uint coin) public {
        BettingTarget_V8 b = BettingTarget_V8(target);
        transferCoin(msg.sender, target, coin); //private method: modify internal storage, only msg.sender pay coin to other
        // BettingTarget.bet() accepts only if the caller is CoinCashier
        b.bet(msg.sender, content, coin);
    }

    //bytes4 version
    function bet4(address target, bytes4 content, uint coin) public {
        BettingTarget_V4 b = BettingTarget_V4(target);
        transferCoin(msg.sender, target, coin);
        // BettingTarget.bet() accepts only if the caller is CoinCashier
        b.bet(msg.sender, content, coin);
    }

    //Game Owner Supply
    function ownerSupply(address target, uint coin) public {
        BettingTarget_V4 b = BettingTarget_V4(target);
        if(b.getOwner() != msg.sender) 
            ERROR_CASE("Only game/voting owner can call ownerSupply")
        transferCoin(msg.sender, target, coin);
        // BettingTarget.ownerSupply() accepts only if the caller is CoinCashier
        b.ownerSupply(coin);
    }
    function ownerSupply8(address target, uint coin) public {
        BettingTarget_V8 b = BettingTarget_V8(target);
        if(b.getOwner() != msg.sender) 
            ERROR_CASE("Only game/voting owner can call ownerSupply")
        transferCoin(msg.sender, target, coin);
        // BettingTarget.ownerSupply() accepts only if the caller is CoinCashier
        b.ownerSupply(coin);
    }

    //ERC223 part
    function name() public view returns (string) {
        return _name;
    }
    function symbol() public view returns (string) {
        return _symbol;
    }
    function decimals() public view returns (uint8) {
        return 18;
    }
    function totalSupply() public view returns (uint256) {
        return _issuedVolume;
    }
    function balanceOf(address who) public view returns(uint) {
        return _balances[who];
    }

    function transfer(address to, uint value) public returns (bool ok) {
        bytes memory empty_data;
        return transfer(to, value, empty_data);
    }
    function transfer(address, uint, bytes, string) public returns (bool ) {
        //we does not support custom fallback for security
        revert();
    }
    function transfer(address to, uint value, bytes data) public returns (bool ok) {
        transferCoin(msg.sender, to, value);
        if(isContract(to)) {
            ERC223_ContractReceiver receiver = ERC223_ContractReceiver(to);
            receiver.tokenFallback(msg.sender, value, data);
        }
        emit Transfer(msg.sender, to, value, data);
        return true;
    }




    function isContract(address addr) private view returns (bool is_contract) {
        uint length;
        assembly {
            //retrieve the size of the code on target address, this needs assembly
            length := extcodesize(addr)
        }
        return (length>0);
    }

}
