pragma solidity ^0.4.0;

import "./ICoinCashier.sol";
import "./BettingTarget_V#RESULT_SIZE.sol";

contract ResultAnnouncement_R ##RESULT_SIZE	is BettingTarget_V ##RESULT_SIZE {
	uint internal _openTime;
	uint internal _deadlineTime;
	bool internal _closed;

	event Closed(RESULT_TYPE truth);

	constructor(address cashier, address regulation, address owner, uint open_time, uint deadline_time) public {
		_cashier = ICoinCashier(cashier);
		_regulation = IRegulation(regulation);
		_openTime = open_time;
		_deadlineTime = deadline_time;//open_time + (duration_min * 1 minutes);
		_closed = false;
		if(owner==address(0)) owner = msg.sender;
		_owner = owner; // if a Game deploys new Announcement, msg.sender is Game contract. the owner should be the onwer of Game. 
	}
	function cashier() public view returns(address) {
		return _cashier;
	}
	function regulation() public view returns(address) {
		return _regulation;
	}
	function votingFee() public view returns(uint) {
		return 0;
	}

	function voteAcceptable() public view returns(bool) {
		return _openTime <= getNow() && getNow() < _deadlineTime;
	}
	function openTime() public view returns(uint) {
		return _openTime;
	}
	function deadlineTime() public view returns(uint) {
		return _deadlineTime;
	}
	function isClosed() public view returns(bool) {
		return _closed;
	}
	function beforeOpen() public view returns(bool) {
		return _openTime > getNow();
	}
	function truth() public view returns(RESULT_TYPE);

}
