pragma solidity ^0.4.0;
import "./CoinCashier.sol";
import "./IRegulation.sol";
import "./ResultAnnouncement_R#RESULT_SIZE.sol";
import "./MajorityVote_R#RESULT_SIZE.sol";

contract GameBase_V ##VOTE_SIZE _R ##RESULT_SIZE	 is BettingTarget_V ##VOTE_SIZE {   

	enum FeeType {
		Value, // fixed value
		Ratio  // fixed ratio (permill)
	}

	string internal _title;
	address[] internal _addresses; //better list
	uint internal _ownerSupply;

	ResultAnnouncement_R ##RESULT_SIZE	 internal _resultSource;
	IRegulation internal _regulation;
	uint internal _openTime;
	uint internal _lockTime;
	bool internal _closed;
	// cancel option
	bool internal _allowCancel;
	bool internal _cancelled;
	FeeType internal _cashierFeeType;
	uint internal _cashierFee;

	event Entried(address indexed user, VOTE_TYPE content, uint volume);
	event Closed(RESULT_TYPE truth, uint userCount, uint totalBetting, uint totalRefund);
	event Cancelled(uint userCount, uint totalBetting, uint totalRefund);

	constructor(string title, address cashier, address result_src, address regulation, uint open_time, uint lock_time) public {
		_title = title;
		_cashier = CoinCashier(cashier);
		_resultSource = ResultAnnouncement_R ##RESULT_SIZE(result_src);
		_regulation = IRegulation(regulation);
		_openTime = open_time;
		_lockTime = lock_time;
	}

	function title() public view returns(string) {
		return _title;
	}
	function openTime() public view returns(uint) {
		return _openTime;
	}
	function lockTime() public view returns(uint) {
	    return  _lockTime;
	}
	function isClosed() public view returns(bool) {
		return _closed;
	}
	function cancelAllowed() public view returns(bool) {
		return _allowCancel;
	}
	function cancelled() public view returns(bool) {
		return _cancelled;
	}
	function betAcceptable() public view returns(bool) {
		return _openTime <= getNow() && getNow() <= _lockTime;
	}
	function ownerSupplyBody(uint coin) internal {
		_ownerSupply += coin;
	}
	function regulation() public view returns(address) {
		return _regulation;
	}
	function resultSource() public view returns(address) {
		return _resultSource;
	}
	function getOwnerSupply() public view onlyOwner returns(uint) {
		return _ownerSupply;
	}

	function getCashierFee() public view returns(FeeType, uint) {
		return (_cashierFeeType, _cashierFee);
	}
	function setCashierFee(FeeType t, uint v) public onlyOwner {
		_cashierFeeType = t;
		_cashierFee = v;
	}


}
