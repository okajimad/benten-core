pragma solidity ^0.4.0;
import "./CoinCashier.sol";
import "./IRegulation.sol";
import "./ResultAnnouncement_R#RESULT_SIZE.sol";
import "./MajorityVote_R#RESULT_SIZE.sol";

contract GameBase_V ##VOTE_SIZE _R ##RESULT_SIZE	 is BettingTarget_V ##VOTE_SIZE {   


	string internal _title;
	address[] internal _addresses; //better list
	uint internal _ownerSupply;

	ResultAnnouncement_R ##RESULT_SIZE	 internal _resultSource;
	IRegulation internal _regulation;
	uint internal _openTime;
	uint internal _lockTime;
	bool internal _closed;
	// cancel option
	bool internal _allowCancel;
	bool internal _cancelled;

	//results
	uint internal _totalRefunds;
	uint internal _totalBettings;
	uint internal _cashierFee;
	uint internal _ownerRefund;
	uint[] internal _refunds;

	event Entried(address indexed user, VOTE_TYPE content, uint volume);
	event Closed(RESULT_TYPE truth, uint userCount, uint totalBetting, uint totalRefund);
	event Cancelled(uint userCount, uint totalBetting, uint totalRefund);

	constructor(string title, address cashier, address result_src, address regulation, address owner, uint open_time, uint lock_time, bool allow_cancel) public {
		_title = title;
		_owner = owner;
		_cashier = CoinCashier(cashier);
		_resultSource = ResultAnnouncement_R ##RESULT_SIZE(result_src);
		_regulation = IRegulation(regulation);
		_openTime = open_time;
		_lockTime = lock_time;
		_allowCancel = allow_cancel;
	}

	function title() public view returns(string) {
		return _title;
	}
	function openTime() public view returns(uint) {
		return _openTime;
	}
	function lockTime() public view returns(uint) {
	    return  _lockTime;
	}
	function isClosed() public view returns(bool) {
		return _closed;
	}
	function cancelAllowed() public view returns(bool) {
		return _allowCancel;
	}
	function cancelled() public view returns(bool) {
		return _cancelled;
	}
	function betAcceptable() public view returns(bool) {
		return _openTime <= getNow() && getNow() <= _lockTime;
	}
	function ownerSupplyBody(uint coin) internal {
		_ownerSupply += coin;
	}
	function regulation() public view returns(address) {
		return _regulation;
	}
	function resultSource() public view returns(address) {
		return _resultSource;
	}
	function getOwnerSupply() public view onlyOwner returns(uint) {
		return _ownerSupply;
	}

	function totalBettings() public view returns(uint) {
		return _totalBettings;
	}
	function totalRefunds() public view returns(uint) {
		require(_closed);
		return _totalRefunds;
	}
	function refundTuple() public view returns(address[] a, uint[] v, uint cf, uint ow) {
		require(_closed);
		return (_addresses, _refunds, _cashierFee, _ownerRefund);
	}

}
