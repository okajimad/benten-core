pragma solidity ^0.4.0;
import "./CoinCashier.sol";
import "./IRegulation.sol";
import "./FixedOddsRegulation.sol";
import "./GameBase_V#VOTE_SIZE_R#RESULT_SIZE.sol";

contract FixedOddsGame_V ##VOTE_SIZE _R ##RESULT_SIZE	 is GameBase_V ##VOTE_SIZE _R ##RESULT_SIZE  {
	struct Entry {
		VOTE_TYPE content;
		uint volume; 
	}
	mapping (address => Entry[]) internal _entries;
	Entry[] internal _bettings;


	constructor(string title, address cashier, address voting, address regulation, address owner, uint open_time, uint close_time, bool allow_cancel) public GameBase_V ##VOTE_SIZE _R ##RESULT_SIZE(title, cashier, voting, regulation, owner, open_time, close_time, allow_cancel) {
	}

	function betBody(address from, VOTE_TYPE content, uint coin) internal {
		if(!betAcceptable()) 
			ERROR_CASE("betting not acceptable")

		entry(from, content, coin);
	}

	function entry(address from, VOTE_TYPE content, uint volume) private {
		Entry[] storage e = _entries[from];
		bool new_entry = e.length==0;
		if(new_entry) _addresses.push(from);
		e.push(Entry(content, volume));

		uint32 index = findOrCreate(content);
		_bettings[index].volume += volume;
		_totalBettings += volume;

		emit Entried(msg.sender, content, volume);
	}

	function bettingOf() public view returns(VOTE_TYPE[], uint[]) {
		Entry[] storage e = _entries[msg.sender];
		VOTE_TYPE[] memory b = new VOTE_TYPE[](e.length);
		uint[] memory v = new uint[](e.length);
		for(uint i=0; i<e.length; i++) {
			b[i] = e[i].content;
			v[i] = e[i].volume;
		}
		return (b, v);
	}

	function currentBettingList() public view returns(VOTE_TYPE[], uint[], uint[] ) {
		VOTE_TYPE[] memory candidates = new VOTE_TYPE[](_bettings.length);
		uint[] memory counts = new uint[](_bettings.length);
		uint[] memory volumes = new uint[](_bettings.length);
		for(uint i=0; i<_bettings.length; i++) {
			Entry storage e = _bettings[i];
			candidates[i] = e.content;
			volumes[i] = e.volume;
			counts[i] += 1;
		}
		return (candidates, counts, volumes);
	}
	// using most wide bytesN 
	function currentBettingList_Wide() public view returns(bytes8[], uint[], uint[]) {
		bytes8[] memory candidates = new bytes8[](_bettings.length);
		uint[] memory counts = new uint[](_bettings.length);
		uint[] memory volumes = new uint[](_bettings.length);
		for(uint i=0; i<_bettings.length; i++) {
			Entry storage e = _bettings[i];
			candidates[i] = bytes8(e.content);
			volumes[i] = e.volume;
			counts[i] += 1;
		}
		return (candidates, counts, volumes);
	}

	function findOrCreate(VOTE_TYPE content) internal returns(uint32) {
		for(uint i=0; i<_bettings.length; i++) {
			if(content == _bettings[i].content)
				return uint32(i);
		}
		_bettings.push(Entry(content, 0));
		return uint32(_bettings.length-1);
	}
	function findEntryIndex(VOTE_TYPE content) internal view returns(uint32) {
		for(uint i=0; i<_bettings.length; i++) {
			if(content == _bettings[i].content)
				return uint32(i);
		}
		return 0xFFFFFFFF;
	}


	//Close Voting
	function close() public onlyOwnerOrCashier {
		if(!_resultSource.isClosed())
			ERROR_CASE("voting address is not closed")
		if(_cancelled)
			ERROR_CASE("game is already cancelled")
		if(_closed)
			ERROR_CASE("game is already closed")

		uint i;
		address a;
		RESULT_TYPE truth = _resultSource.truth(); //get correct answer

		VOTE_TYPE[] memory content_list;
		uint[] memory bettings;
		uint[] memory counts;
		(content_list, bettings, counts) = currentBettingList();
		int[] memory refund_odds;
		(refund_odds, _cashierFee) = FixedOddsRegulation(_regulation).calcRefundOdds(this, truth);

		CashierBase cashier = CashierBase(_cashier);

		_totalRefunds = 0;
		for(i=0; i<_addresses.length; i++) {
			a = _addresses[i];
			Entry[] storage e = _entries[a];
			uint refund = 0;
			for(uint j=0; j<e.length; j++) {
				Entry storage ee = e[j];
				uint32 index = findOrCreate(ee.content);
				int odds = refund_odds[index];

				if(odds == -1)
					refund += ee.volume; // confiscated game
				else
					refund += permilMul(ee.volume, uint(odds));
			}
			if(refund>0)
				_cashier.transferCoin(a, refund);
			_totalRefunds += refund;
			_refunds.push(refund);
		}
		if(_totalRefunds > _totalBettings + _ownerSupply) 
			ERROR_CASE("owner supply is insufficient")

		
		//remaining coin go to the owner of this game
		uint base_profit = _totalBettings + _ownerSupply - _totalRefunds;
		_ownerRefund = base_profit - _cashierFee;

		if(_ownerRefund > 0)
			_cashier.transferCoin(getOwner(), _ownerRefund);
		if(_cashierFee > 0)
			_cashier.transferCoin(cashier.getOwner(), _cashierFee);
		_closed = true;

		emit Closed(truth, _addresses.length, _totalBettings, _totalRefunds);
	}

	function cancelGame() public onlyOwner {
		if(_closed)
			ERROR_CASE("game is already closed")
		if(_cancelled)
			ERROR_CASE("game is already cancelled")
		if(!_allowCancel)
			ERROR_CASE("cancel is not allowed")

		_totalRefunds = 0;
		for(uint i=0; i<_addresses.length; i++) {
			address a = _addresses[i];
			Entry[] storage e = _entries[a];
			uint refund = 0;
			for(uint j=0; j<e.length; j++) {
				refund += e[j].volume;
			}
			if(refund>0)
				_cashier.transferCoin(a, refund);
			_refunds.push(refund);
			_totalRefunds += refund;
		}
		
		if(_ownerSupply>0)
			_cashier.transferCoin(this.getOwner(), _ownerSupply);
		_cancelled = true;
		_closed = true;

		emit Cancelled(_addresses.length, _totalBettings, _totalRefunds);
	}



}
