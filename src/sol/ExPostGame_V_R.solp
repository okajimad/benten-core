pragma solidity ^0.4.0;
import "./FixedOddsGame_V#VOTE_SIZE_R#RESULT_SIZE.sol";
import "./ExPostRegulation.sol";

// A lottery that the winners take all bettings in proportion to their bettings
contract ExPostGame_V ##VOTE_SIZE _R ##RESULT_SIZE	 is FixedOddsGame_V ##VOTE_SIZE _R ##RESULT_SIZE  {

	constructor(string title, address cashier, address voting, address regulation, address owner, uint open_time, uint close_time, bool allow_cancel) public FixedOddsGame_V ##VOTE_SIZE _R ##RESULT_SIZE(title, cashier, voting, regulation, owner, open_time, close_time, allow_cancel) {
		_className = "ExPostGame_V#VOTE_SIZE_R#RESULT_SIZE";
	}
/*
	function betList() public view returns(VOTE_TYPE[]) {
		VOTE_TYPE[] memory r = new VOTE_TYPE[](_bettings.length);
		for(uint i=0; i<_bettings.length; i++)
			r[i] = _bettings[i].content;
		return r;
	}
	function volumeList() public view returns(uint[]) {
		uint[] memory r = new uint[](_bettings.length);
		for(uint i=0; i<_bettings.length; i++)
			r[i] = _bettings[i].volume;
		return r;
	}
	function betAndVolumeList() public view returns(VOTE_TYPE[], uint[]) {
		VOTE_TYPE[] memory r = new VOTE_TYPE[](_bettings.length);
		uint[] memory v = new uint[](_bettings.length);
		for(uint i=0; i<_bettings.length; i++) {
			r[i] = _bettings[i].content;
			v[i] = _bettings[i].volume;
		}
		return (r, v);
	}
*/
}
